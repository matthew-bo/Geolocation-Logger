rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId)) ||
             exists(/databases/$(database)/documents/friendships/$(userId + '_' + request.auth.uid));
    }
    
    function isValidDrink() {
      let requiredFields = ['brand', 'drinkType', 'containerType', 'amount', 'rating', 'location', 'userId', 'timestamp'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.amount is number &&
             request.resource.data.rating is number &&
             request.resource.data.rating >= 0 &&
             request.resource.data.rating <= 5;
    }

    function isGroupMember(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return isAuthenticated() && request.auth.uid in group.data.members;
    }

    function isGroupCreator(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return isAuthenticated() && request.auth.uid == group.data.creatorId;
    }

    // User profiles
    match /users/{userId} {
      // Allow reading username info for registration checks
      allow list: if true;  // This allows querying users collection to check for username existence
      allow get: if true;   // Allow getting individual user documents
      
      // For user document creation, only check that the userId matches the auth.uid
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // Allow users to read and write their own data
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Additional rule for emailHistory
      match /emailHistory/{historyId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false;  // Only writable through Cloud Functions
      }
    }

    // Drinks
    match /drinks/{drinkId} {
      // Allow reading your own drinks or friends' drinks
      allow read: if isAuthenticated() && 
                 (resource.data.userId == request.auth.uid || 
                  isFriend(resource.data.userId));
      
      // Allow listing/querying drinks
      allow list: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }

    // Friend requests
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() &&
                 (resource.data.senderId == request.auth.uid || 
                  resource.data.receiverId == request.auth.uid);
      
      allow create: if isAuthenticated() &&
                   request.resource.data.senderId == request.auth.uid &&
                   request.resource.data.status == 'pending';
      
      allow update: if isAuthenticated() &&
                   resource.data.receiverId == request.auth.uid;
      
      allow delete: if isAuthenticated() &&
                   (resource.data.senderId == request.auth.uid || 
                    resource.data.receiverId == request.auth.uid);
    }

    // Friendships
    match /friendships/{friendshipId} {
      // Allow listing/querying friendships when authenticated
      allow list: if isAuthenticated();
      
      // Allow reading specific friendship documents
      allow get: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                   (request.resource.data.user1 == request.auth.uid ||
                    request.resource.data.user2 == request.auth.uid);
      
      allow update: if isAuthenticated() &&
                   (resource.data.user1 == request.auth.uid ||
                    resource.data.user2 == request.auth.uid);
      
      allow delete: if isAuthenticated() &&
                   (resource.data.user1 == request.auth.uid ||
                    resource.data.user2 == request.auth.uid);
    }

    // Groups collection
    match /groups/{groupId} {
      // Allow listing/querying groups when authenticated
      allow list: if isAuthenticated();
      
      // Allow reading specific group documents
      allow get: if isAuthenticated() && (
        !exists(resource) || // Allow reading non-existent documents
        request.auth.uid in resource.data.members
      );
      
      // Allow creating groups
      allow create: if isAuthenticated() && 
                   request.resource.data.creatorId == request.auth.uid &&
                   request.auth.uid in request.resource.data.members;
      
      // Allow updating groups
      allow update: if isAuthenticated() && (
        isGroupCreator(groupId) ||
        (request.auth.uid in resource.data.members && 
         request.auth.uid in request.resource.data.members)
      );
      
      // Allow deleting groups
      allow delete: if isGroupCreator(groupId);
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      allow create: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
      allow update: if isAuthenticated() && isGroupMember(resource.data.groupId);
      allow delete: if isAuthenticated() && isGroupMember(resource.data.groupId);
    }

    // Group history collection
    match /groupHistory/{historyId} {
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      allow create: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
      allow update: if false;  // History should never be updated
      allow delete: if false;  // History should never be deleted
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Location aliases collection
    match /locationAliases/{userId} {
      allow read: if isAuthenticated();  // Allow any authenticated user to read aliases
      allow write: if isAuthenticated() && request.auth.uid == userId;  // Only owner can write
    }
  }
}